# Exercise 1.5
# Author: Noah Waterfield Price

iron_density = 7.8
air_density = 0.0012
gasoline_density = 0.67
ice_density = 0.9
human_body_density = 1.03
silver_density = 10.5
platinum_density = 21.4

liter = 1000  # Units of cm^3

print 'One liter of iron weighs {ir:g} grams'\
    .format(ir=iron_density * liter)
print 'One liter of air weighs {ai:g} grams'\
    .format(ai=air_density * liter)
print 'One liter of gasoline weighs {ga:g} grams'\
    .format(ga=gasoline_density * liter)
print 'One liter of ice weighs {ic:g} grams'\
    .format(ic=ice_density * liter)
print 'One liter of human body weighs {hu:g} grams'\
    .format(hu=human_body_density * liter)
print 'One liter of silver weighs {si:g} grams'\
    .format(si=silver_density * liter)
print 'One liter of platinum weighs {pl:g} grams'\
    .format(pl=platinum_density * liter)

"""
Sample run:
python 1liter.py
One liter of iron weighs 7800 grams
One liter of air weighs 1.2 grams
One liter of gasoline weighs 670 grams
One liter of ice weighs 900 grams
One liter of human body weighs 1030 grams
One liter of silver weighs 10500 grams
One liter of platinum weighs 21400 grams
"""
# Exercise 1.1
# Author: Noah Waterfield Price

answer = 1 + 1
print answer

"""
Sample run:
python 1plus1.py
2
"""
# Exercise 1.10
# Author: Noah Waterfield Price

from math import pi, exp, sqrt

m = 0
s = 2.0
x = 1.0

f = 1 / (sqrt(2 * pi) * s) * exp(-0.5 * ((x - m) / s) ** 2)
print f

"""
Sample run:
python Gaussian1.py
0.176032663382
"""
# Exercise 1.9c
# Author: Noah Waterfield Price

a = 3.3
b = 5.3
a2 = a ** 2
b2 = b ** 2

eq1_sum = a2 + 2 * a * b + b2
eq2_sum = a2 - 2 * a * b + b2

eq1_pow = (a + b) ** 2
eq2_pow = (a - b) ** 2

print 'First equation: %g = %g' % (eq1_sum, eq1_pow)
print 'Second equation: %g = %g' % (eq2_sum, eq2_pow)

"""
Sample run:
python a_pm_b_sqr.py
First equation: 73.96 = 73.96
Second equation: 4 = 4
"""
# Exercise 1.9b
# Author: Noah Waterfield Price

v0 = 3  # m/s
t = 1  # s
a = 2  # m/s
s = v0 * t + 0.5 * a * t ** 2
print s

"""
Sample run:
python acceleration.py
4.0
"""
# Exercise 1.12
# Author: Noah Waterfield Price

from math import log, pi

rho = 1.038 * 1000  # Egg density (kg m^-3_
c = 3.7 * 1000  # Specific heat capacity (J kg^-1 K^-1)
K = 0.54  # Thermal conductivity (W m^-1 K^-1)
T_w = 373.15  # Boiling water temperature (K)
T_y = 343.15  # Desired yolk temperature (K)

# Egg from fridge
T_0 = 277.15
# Small egg
M = 0.047
t_small = M ** (2.0 / 3) * c * rho ** (1.0 / 3) / \
    (K * pi ** 2 * (4 * pi / 3) ** (2.0 / 3)) * \
    log(0.76 * (T_0 - T_w) / (T_y - T_w))
# Large egg
M = 0.067
t_large = M ** (2.0 / 3) * c * rho ** (1.0 / 3) / \
    (K * pi ** 2 * (4 * pi / 3) ** (2.0 / 3)) * \
    log(0.76 * (T_0 - T_w) / (T_y - T_w))
print 'From the fridge: to hard boil a small egg cook for %.2f minutes \
    and a large egg for %.2f minutes.' % (t_small / 60, t_large / 60)

# Egg at room temperature
T_0 = 293.15
# Small egg
M = 0.047
t_small = M ** (2.0 / 3) * c * rho ** (1.0 / 3) / \
    (K * pi ** 2 * (4 * pi / 3) ** (2.0 / 3)) * \
    log(0.76 * (T_0 - T_w) / (T_y - T_w))
# Large egg
M = 0.067
t_large = M ** (2.0 / 3) * c * rho ** (1.0 / 3) / \
    (K * pi ** 2 * (4 * pi / 3) ** (2.0 / 3)) * \
    log(0.76 * (T_0 - T_w) / (T_y - T_w))
print 'At room temperature: to hard boil a small egg cook for %.2f minutes \
    and a large egg for %.2f minutes.' % (t_small / 60, t_large / 60)

"""
Sample run:
python egg.py
From the fridge: to hard boil a small egg cook for 5.22 minutes and a large egg for 6.61 minutes.
At room temperature: to hard boil a small egg cook for 4.15 minutes and a large egg for 5.25 minutes.
"""
# Exercise 1.7
# Author: Noah Waterfield Price

from math import sin

x = 1
print 'sin(%g)=%g' % (x, sin(x))

"""
Sample run:
python find_errors.py
sin(1)=0.841471
"""
# Exercise 1.8
# Author: Noah Waterfield Price

from math import pi

h = 5.0  # height
b = 2.0  # base
r = 1.5  # radius

area_parallelogram = h * b
print 'The area of the parallelogram is %.3f' % area_parallelogram

area_square = b ** 2
print 'The area of the square is %g' % area_square

area_circle = pi * r ** 2
print 'The area of the circle is %.f' % area_circle

volume_cone = 1.0 / 3 * pi * r ** 2 * h
print 'The volume of the cone is %.3f' % volume_cone

"""
Sample run:
python formulas_shapes.py
The area of the parallelogram is 10.000
The area of the square is 4
The area of the circle is 7
The volume of the cone is 11.781
"""
# Exercise 1.2
# Author: Noah Waterfield Price

print "Hello, World!"

"""
Sample run:
python hello_world.py
Hello, World!
"""
# Exercise 1.6
# Author: Noah Waterfield Price

interest_rate = 5.0  # in percent
years = 3
initial_amount = 1000
# Calculate final amount due to interest rate
final_amount = initial_amount * (1 + interest_rate / 100) ** years
print final_amount

"""
Sample run:
python interest_rate.py
1157.625
"""
# Exercise 1.11
# Author: Noah Waterfield Price

from math import pi

C_D = 0.2  # Drag coefficient
rho = 1.2  # Density of air (kg m^-3)
A = pi * 0.11 ** 2  # Football cross sectional area (m^2)
m = 0.43  # Football mass (kg)
g = 9.81  # Gravitational acceleration (ms^-1)

F_g = m * g

speed_conversion = 1000.0 / 3600

V = 120 * speed_conversion  # Hard kick velocity (m/s)
F_d = 0.5 * C_D * rho * A * V ** 2
print 'For a hard kick (v = %g), the gravitational force is %g and \
    the drag force is %g' % (V, F_g, F_d)

V = 10 * speed_conversion  # Soft kick velocity (m/s)
F_d = 0.5 * C_D * rho * A * V ** 2
print 'For a soft kick (v = %g), the gravitational force is %g and \
the drag force is %g' % (V, F_g, F_d)

"""
Sample run:
python kick.py
For a hard kick (v = 33.3333), the gravitational force is 4.2183 and the drag force is 5.06844
For a soft kick (v = 2.77778), the gravitational force is 4.2183 and the drag force is 0.0351975
"""
# Exercise 1.4
# Author: Noah Waterfield Price"

inch = 0.0254
foot = inch * 12
yard = foot * 3
mile = yard * 1760

metres = raw_input(
    'Enter distance in meters to be converted to imperial units\n')
metres = float(metres)
inches = metres / inch
feet = metres / foot
yards = metres / yard
miles = metres / mile

print '{m:g} metres is equivalent to {i:g} inches, {f:g} feet, {y:g} yards,\
 {mi:g} miles.'.format(m=metres, i=inches, f=feet, y=yards, mi=miles)

"""
Sample run:
python python length_conversion.py
Enter distance in meters to be converted to imperial units
640
640 metres is equivalent to 25196.9 inches, 2099.74 feet, 699.913 yards, 0.397678 miles.
"""
# Exercise 1.17
# Author: Noah Waterfield Price

from cmath import sqrt

a = 2
b = 1
c = 2
q = sqrt(b * b - 4 * a * c)
x1 = (-b + q) / (2 * a)
x2 = (-b - q) / (2 * a)

print x1
print x2

"""
Sample run:
python quadratic_find_errors.py
(-0.25+0.968245836552j)
(-0.25-0.968245836552j)
"""
# Exercise 1.3
# Author: Noah Waterfield Price

seconds = raw_input('Type number of seconds to be converted to years\n')
years = float(seconds) / (365.25 * 24 * 60 * 60)
print "%.2f years" % (years)

"""
Sample run:
python seconds2years.py
Type number of seconds to be converted to years
1e9
31.69 years
"""
# Exercise 1.9a
# Author: Noah Waterfield Price

from math import sin, cos, pi

x = pi / 4
val1 = sin(x) ** 2 + cos(x) ** 2
print val1

"""
Sample run:
python sin2_plus_cos2.py
1.0
"""
