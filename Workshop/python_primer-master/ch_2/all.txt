# Exercise 2.6
# Author: Noah Waterfield Price

v0 = 1
g = 9.81
n = 11
dt = 2 * v0 / g / (n - 1)

print '%6s %6s' % ('t', 'y')
for i in range(0, n):
    t = i * dt
    y = v0 * t - 0.5 * g * t ** 2
    print '%6.3f %6.3f' % (t, y)

"""
Sample run:
python ball_table1.py
     t      y
 0.000  0.000
 0.020  0.018
 0.041  0.033
 0.061  0.043
 0.082  0.049
 0.102  0.051
 0.122  0.049
 0.143  0.043
 0.163  0.033
 0.183  0.018
 0.204  0.000
"""
# Exercise 2.7
# Author: Noah Waterfield Price

v0 = 10
g = 9.81
n = 81
dt = 2 * v0 / g / (n - 1)

t = [i * dt for i in range(0, n)]
y = [v0 * t[i] - 0.5 * g * t[i] ** 2 for i in range(0, n)]

print '%6s %6s' % ('t', 'y')
for tval, yval in zip(t, y):
    print '%6.3f %6.3f' % (tval, yval)
"""
Sample run:
python ball_table2.py
     t      y
 0.000  0.000
 0.025  0.252
 0.051  0.497
 0.076  0.736
 ....
 1.962  0.736
 1.988  0.497
 2.013  0.252

"""
# Exercise 2.19
# Author: Noah Waterfield Price

v0 = 10
g = 9.81
n = 81
dt = 2 * v0 / g / (n - 1)

t = [i * dt for i in range(0, n)]
y = [v0 * t[i] - 0.5 * g * t[i] ** 2 for i in range(0, n)]

ty1 = [t, y]

print '%6s %6s' % ('t', 'y')
for i in range(len(t)):
    print '%6.3f %6.3f' % (ty1[0][i], ty1[1][i])

ty2 = [[tval, yval] for tval, yval in zip(t, y)]

print '%6s %6s' % ('t', 'y')
for tval, yval in ty2:
    print '%6.3f %6.3f' % (tval, yval)

"""
Sample run:
python ball_table3.py
     t      y
 0.000  0.000
 0.025  0.252
 0.051  0.497
 0.076  0.736
 ....
 1.962  0.736
 1.988  0.497
 2.013  0.252
     t      y
 0.000  0.000
 0.025  0.252
 0.051  0.497
 0.076  0.736
 ....
 1.962  0.736
 1.988  0.497
 2.013  0.252
"""
# Exercise 2.24
# Author: Noah Waterfield Price

a = 1 / 947.0 * 947
b = 1
if a != b:
    print 'Wrong result!'

a = 1 / 947.0 * 947
b = 1
if abs(a - b) > 1e-15:
    print 'Wrong result!'

"""
Sample run:
python compare_float.py
Wrong result!
"""
# Exercise 2.10
# Author: Noah Waterfield Price

h = 0.01
x = []
for i in range(0, 101):
    x.append(1 + i * h)
for xval in x:
    print '%3.2f' % xval,

"""
Sample run:
python coor1.py
1.00 1.01 1.02 1.03 1.04 1.05 1.06 ... 1.98 1.99 2.00
"""
# Exercise 2.11
# Author: Noah Waterfield Price

h = 0.01
x = [1 + i * h for i in range(0, 101)]
for xval in x:
    print '%3.2f' % xval,

"""
Sample run:
python coor1.py
1.00 1.01 1.02 1.03 1.04 1.05 1.06 ... 1.98 1.99 2.00
"""
# Exercise 2.18
# Author: Noah Waterfield Price

F = [i for i in range(0, 110, 10)]
C = [(5. / 9) * (F[i] - 32) for i in range(len(F))]
C_approx = [0.5 * (F[i] - 30) for i in range(len(F))]

conversion = [[Fval, Cval, C_approxval]
              for Fval, Cval, C_approxval in zip(F, C, C_approx)]

print '------------------------'
print '%6s %8s %8s' % ('F', 'C', '~C')  # column headers
for Fval, Cval, C_approxval in conversion:
    print '%6.2f %8.2f %8.2f' % (Fval, Cval, C_approxval)
print '------------------------'

"""
Sample run:
python f2c_approx_lists.py
------------------------
     F        C       ~C
  0.00   -17.78   -15.00
 10.00   -12.22   -10.00
 20.00    -6.67    -5.00
 30.00    -1.11     0.00
 40.00     4.44     5.00
 50.00    10.00    10.00
 60.00    15.56    15.00
 70.00    21.11    20.00
 80.00    26.67    25.00
 90.00    32.22    30.00
100.00    37.78    35.00
------------------------
"""
# Exercise 2.2
# Author: Noah Waterfield Price

print '------------------------'     					# table heading
F = 0                        					# start value for F
dC = 10                         				# increment of F in loop
print '%6s %8s %8s' % ('F', 'C', '~C')  # column headers
while F <= 100:
    C = (5. / 9) * (F - 32)
    C_approx = 0.5 * (F - 30)
    print '%6.2f %8.2f %8.2f' % (F, C, C_approx)
    F = F + dC
print '------------------------'     			# end of table line (after loop)

"""
Sample run:
python f2c_approx_table.py
------------------------
     F        C       ~C
  0.00   -17.78   -15.00
 10.00   -12.22   -10.00
 20.00    -6.67    -5.00
 30.00    -1.11     0.00
 40.00     4.44     5.00
 50.00    10.00    10.00
 60.00    15.56    15.00
 70.00    21.11    20.00
 80.00    26.67    25.00
 90.00    32.22    30.00
100.00    37.78    35.00
------------------------
"""
# Exercise 2.1
# Author: Noah Waterfield Price

print '------------------'     		# table heading
F = 0                        		# start value for F
dC = 10                         	# increment of F in loop
print '%6s %8s' % ('F', 'C')		# column headers
while F <= 100:                 	# loop heading with condition
    C = (5. / 9) * (F - 32)         	# 1st statement inside loop
    print '%6.2f %8.2f' % (F, C)  	# 2nd statement inside loop
    F = F + dC                 		# 3rd statement inside loop
print '------------------'     		# end of table line (after loop)

"""
Sample run:
python f2c_table_while.py
------------------
     F        C
  0.00   -17.78
 10.00   -12.22
 20.00    -6.67
 30.00    -1.11
 40.00     4.44
 50.00    10.00
 60.00    15.56
 70.00    21.11
 80.00    26.67
 90.00    32.22
100.00    37.78
------------------
"""
# Exercise 2.16
# Author: Noah Waterfield Price

q = [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h']]

print q[0][0]  # a
print q[1]  # ['d', 'e', 'f']
print q[2][1]  # h
print q[1][0]  # d

"""
Sample run:
python index_nested_list.py
a
['d', 'e', 'f']
h
d
"""
# Exercise 2.14
# Author: Noah Waterfield Price

"""
This program calculated the amount of years
it takes for an amount of money to reach 1.5
times its value, given and interest rate of p

To solve the integer division error if p is an 
int, it was necessary to change p/100 to p/100.
"""

initial_amount = 100
p = 5.5  # interest rate
amount = initial_amount
years = 0
while amount <= 1.5 * initial_amount:
    amount += p / 100. * initial_amount
    years += 1
print years

"""
Sample run:
python interest_rate_loop.py
10
"""
# Exercise 2.15
# Author: Noah Waterfield Price

from math import asin, pi

n = 10
x_list = [i * 1. / n for i in range(n + 1)]

print '------------------'
print '%-3s %13s ' % ('x', 'arcsin(x)')
for x in x_list:
    print '%-3.2f %12.2f' % (x, asin(x) * 180 / pi)
print '------------------'

"""
Sample run:
python inverse_sin.py
------------------
x       arcsin(x)
0.00         0.00
0.10         5.74
0.20        11.54
0.30        17.46
0.40        23.58
0.50        30.00
0.60        36.87
0.70        44.43
0.80        53.13
0.90        64.16
1.00        90.00
------------------*
"""
# Exercise 2.20
# Author: Noah Waterfield Price

r_list = []
for i in range(5):
    r_list.append(10 ** i)
q1 = []
for r in r_list:
    q1.append(r ** 2)

q2 = [r ** 2 for r in [10 ** i for i in range(5)]]

print q1 == q2

"""
Sample run:
python listcomp2for.py
True
"""
# Exercise 2.23
# Author: Noah Waterfield Price

eps = 1.0
while 1.0 != 1.0 + eps:
    print '...............', eps
    eps /= 2.0
print 'final eps:', eps

"""
Sample run:
python machine_zero.py
............... 1.0
............... 0.5
............... 0.25
............... 0.125
............... 0.0625
....
............... 8.881784197e-16
............... 4.4408920985e-16
............... 2.22044604925e-16
final eps: 1.11022302463e-16
"""
# Exercise 2.17
# Author: Noah Waterfield Price

q = [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h']]
for i in q:  # i is sub list of q
    for j in range(len(i)):  # j is integer
        print i[j],

"""
Sample run:
python nested_list_iter.py
a b c d e f g h
"""
# Exercise 2.3
# Author: Noah Waterfield Price

n = 12
i = 0
while i < int(round(n / 2.)):
    print 2 * i + 1,
    i += 1

"""
Sample run:
python odd_list2.py
1 3 5 7 9 11
"""
# Exercise 2.4
# Author: Noah Waterfield Price

n = 12
i = 0
odd_nos = []
while i < int(round(n / 2.)):
    odd_nos.append(2 * i + 1)
    i += 1

for no in odd_nos:
    print no,

"""
Sample run:
python odd_list2.py
1 3 5 7 9 11
"""
# Exercise 2.5
# Author: Noah Waterfield Price

n = 12
odd_nos = [2 * i + 1 for i in range(0, int(round(n / 2.)))]
for no in odd_nos:
    print no,

"""
Sample run:
python odd_list2.py
1 3 5 7 9 11
"""
# Exercise 2.8
# Author: Noah Waterfield Price

primes = [2, 3, 5, 7, 11, 13]

for prime in primes:
    print prime,

p = 17
primes.append(p)
print '\n'
for prime in primes:
    print prime,

"""
Sample run:
python primes.py
2 3 5 7 11 13 

2 3 5 7 11 13 17
"""
# Exercise 2.22
# Author: Noah Waterfield Price

from math import sqrt
for n in range(1, 60):
    r = 2.0
    for i in range(n):
        r = sqrt(r)
    for i in range(n):
        r = r ** 2
    print '%d times sqrt and **2: %.16f' % (n, r)

"""
Sample run:
python repeated_sqrt.py
1 times sqrt and **2: 2.0000000000000004
2 times sqrt and **2: 1.9999999999999996
3 times sqrt and **2: 1.9999999999999996
....
58 times sqrt and **2: 1.0000000000000000
59 times sqrt and **2: 1.0000000000000000
"""

"""
1 is returned for n >= 52 as square rooting 2 52 times reduces
it to 1.0 to the degree of accuracy available in a Python float.
1 squared any number of times is still 1 so the second operation
leaves the number unchanged and 2 is not recovered
"""
# Exercise 2.13
# Author: Noah Waterfield Price

s = 0
k = 1
M = 100
for k in range(1, M + 1):
    s += 1. / k
print s

"""
Sample run:
python sum_for.py
5.18737751764
"""
# Exercise 2.12
# Author: Noah Waterfield Price

s = 0
k = 1
M = 100
while k <= M:
    s += 1. / k
    k += 1
print s

"""
Sample run:
python sum_while.py
5.18737751764
"""
# Exercise 2.25
# Author: Noah Waterfield Price

import time

t0 = time.time()
while time.time() - t0 < 10:
    print '....I like while loops!'
    # time.sleep(2)
print 'Oh, no - the loop is over.'

t0 = time.time()
while time.time() - t0 > 10:
    print '....I like while loops!'
    time.sleep(2)
print 'Oh, no - the loop is over.'

"""
Sample run:
python time_while.py
....I like while loops!
....I like while loops!
....I like while loops!
....I like while loops!
....I like while loops!
Oh, no - the loop is over.
Oh, no - the loop is over.
"""
